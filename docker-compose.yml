services:
  db:
    image: postgres:15-alpine
    container_name: legislators_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - legislators_network

  flask-api:
    build:
      context: ./flask-api
      dockerfile: Dockerfile
    container_name: legislators_flask_api
    environment:
      DATABASE_URL: ${DATABASE_URL}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      FLASK_ENV: ${FLASK_ENV}
    ports:
      - "${FLASK_API_PORT}:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./flask-api:/app
    networks:
      - legislators_network
    restart: unless-stopped

  data_ingestion:
    build:
      context: ./flask-api
      dockerfile: Dockerfile
    container_name: legislators_data_ingestion
    environment:
      DATABASE_URL: ${DATABASE_URL} #postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_PORT}/${POSTGRES_DB}
      LEGISLATORS_CSV_URL: ${LEGISLATORS_CSV_URL}
    depends_on:
      db:
        condition: service_healthy
    command: python ingest_data.py
    networks:
      - legislators_network
    profiles:
      - data-load

  django-api:
    build:
      context: ./django-api
      dockerfile: Dockerfile
    container_name: legislators_django_api
    environment:
      DATABASE_URL: ${DATABASE_URL}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      LEGISLATORS_CSV_URL: ${LEGISLATORS_CSV_URL}
    ports:
      - "${DJANGO_API_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./django-api:/app
    networks:
      - legislators_network
    restart: unless-stopped


volumes:
  postgres_data:
    driver: ${VOLUME_DRIVER}

networks:
  legislators_network:
    driver: ${NETWORK_DRIVER}
